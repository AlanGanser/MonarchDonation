export class Point {
    x: number;
    y: number;
    constructor(x: number, y: number) {
        this.x = x;
        this.y = y;
    }
}

class Line {
    p1: Point;
    p2: Point;
    constructor(p1: Point, p2: Point) {
        this.p1 = p1;
        this.p2 = p2;
    }
}

const onLine = (l1: Line, p: Point) => {
    // Check whether p is on the line or not
    if (
        p.x <= Math.max(l1.p1.x, l1.p2.x) &&
        p.x >= Math.min(l1.p1.x, l1.p2.x) &&
        p.y <= Math.max(l1.p1.y, l1.p2.y) &&
        p.y >= Math.min(l1.p1.y, l1.p2.y)
    )
        return true;

    return false;
};

const direction = (a: Point, b: Point, c: Point) => {
    let val = (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y);

    if (val == 0)
        // Collinear
        return 0;
    else if (val < 0)
        // Anti-clockwise direction
        return 2;

    // Clockwise direction
    return 1;
};

const isIntersect = (l1: Line, l2: Line) => {
    // Four direction for two lines and points of other line
    let dir1 = direction(l1.p1, l1.p2, l2.p1);
    let dir2 = direction(l1.p1, l1.p2, l2.p2);
    let dir3 = direction(l2.p1, l2.p2, l1.p1);
    let dir4 = direction(l2.p1, l2.p2, l1.p2);

    // When intersecting
    if (dir1 != dir2 && dir3 != dir4) return true;

    // When p2 of line2 are on the line1
    if (dir1 == 0 && onLine(l1, l2.p1)) return true;

    // When p1 of line2 are on the line1
    if (dir2 == 0 && onLine(l1, l2.p2)) return true;

    // When p2 of line1 are on the line2
    if (dir3 == 0 && onLine(l2, l1.p1)) return true;

    // When p1 of line1 are on the line2
    if (dir4 == 0 && onLine(l2, l1.p2)) return true;

    return false;
};

export const checkInside = (poly: Point[], lng: number, lat: number) => {
    const p = new Point(lng, lat)
    
    // When polygon has less than 3 edge, it is not polygon
    const n = poly.length - 1
    if (n < 3) return false;

    // Create a point at infinity, y is same as point p
    let tmp = new Point(9999, p.y);
    let exline = new Line(p, tmp);
    let count = 0;
    let i = 0;
    do {
        // Forming a line from two consecutive points of
        // poly
        let side = new Line(poly[i], poly[(i + 1) % n]);
        if (isIntersect(side, exline)) {
            // If side is intersects exline
            if (direction(side.p1, p, side.p2) == 0) return onLine(side, p);
            count++;
        }
        i = (i + 1) % n;
    } while (i != 0);

    // When count is odd
    return count & 1;
};

export const donationAreaPolygon = [
    new Point(-106.6129009, 31.9203559),
    new Point(-106.615755, 31.917315),
    new Point(-106.618588, 31.917898),
    new Point(-106.625282, 31.912798),
    new Point(-106.633608, 31.90981),
    new Point(-106.639874, 31.905584),
    new Point(-106.645624, 31.898735),
    new Point(-106.645624, 31.895456),
    new Point(-106.643049, 31.893124),
    new Point(-106.639359, 31.892104),
    new Point(-106.634123, 31.889407),
    new Point(-106.630518, 31.886201),
    new Point(-106.629231, 31.884014),
    new Point(-106.631462, 31.878621),
    new Point(-106.634123, 31.875341),
    new Point(-106.635754, 31.871697),
    new Point(-106.635926, 31.866594),
    new Point(-106.627772, 31.860762),
    new Point(-106.626055, 31.856316),
    new Point(-106.61464, 31.846473),
    new Point(-106.608288, 31.846619),
    new Point(-106.605456, 31.845963),
    new Point(-106.601936, 31.844578),
    new Point(-106.601422, 31.839911),
    new Point(-106.603567, 31.835609),
    new Point(-106.603825, 31.832911),
    new Point(-106.604597, 31.831234),
    new Point(-106.605198, 31.827733),
    new Point(-106.602795, 31.824816),
    new Point(-106.593954, 31.824816),
    new Point(-106.587603, 31.821972),
    new Point(-106.582196, 31.8157),
    new Point(-106.581423, 31.813658),
    new Point(-106.577046, 31.810376),
    new Point(-106.570608, 31.810157),
    new Point(-106.566574, 31.81322),
    new Point(-106.563227, 31.812345),
    new Point(-106.562884, 31.810959),
    new Point(-106.558077, 31.810303),
    new Point(-106.547176, 31.807093),
    new Point(-106.543829, 31.8033),
    new Point(-106.540138, 31.801112),
    new Point(-106.535761, 31.798194),
    new Point(-106.532929, 31.792577),
    new Point(-106.531641, 31.791847),
    new Point(-106.530354, 31.791993),
    new Point(-106.52838, 31.791008),
    new Point(-106.527264, 31.789695),
    new Point(-106.527092, 31.787725),
    new Point(-106.527092, 31.786047),
    new Point(-106.527779, 31.783859),
    new Point(-106.527264, 31.781414),
    new Point(-106.524732, 31.778605),
    new Point(-106.523144, 31.776015),
    new Point(-106.518724, 31.772914),
    new Point(-106.515762, 31.772075),
    new Point(-106.51426, 31.771455),
    new Point(-106.512415, 31.769703),
    new Point(-106.511686, 31.768207),
    new Point(-106.510698, 31.762771),
    new Point(-106.509497, 31.761165),
    new Point(-106.507008, 31.761348),
    new Point(-106.506107, 31.760983),
    new Point(-106.503961, 31.758976),
    new Point(-106.501343, 31.75737),
    new Point(-106.500313, 31.756057),
    new Point(-106.497352, 31.754524),
    new Point(-106.49585, 31.753685),
    new Point(-106.494434, 31.752189),
    new Point(-106.49276, 31.750766),
    new Point(-106.491258, 31.749853),
    new Point(-106.490228, 31.748977),
    new Point(-106.486022, 31.748028),
    new Point(-106.482503, 31.748685),
    new Point(-106.475122, 31.750437),
    new Point(-106.473663, 31.750546),
    new Point(-106.472032, 31.751386),
    new Point(-106.470898, 31.752352),
    new Point(-106.469182, 31.757096),
    new Point(-106.468409, 31.75841),
    new Point(-106.466564, 31.759942),
    new Point(-106.455234, 31.764394),
    new Point(-106.451801, 31.764649),
    new Point(-106.449998, 31.764102),
    new Point(-106.434857, 31.755152),
    new Point(-106.430223, 31.754058),
    new Point(-106.41934, 31.78285),
    new Point(-106.402002, 31.822532),
    new Point(-106.326643, 31.842075),
    new Point(-106.366442, 31.900402),
    new Point(-106.495838, 31.899146),
    new Point(-106.6129009, 31.9203559),
];

// Driver code

// Function call

// -106.6129009,31.9203559
// -106.615755,31.917315
// -106.618588,31.917898
// -106.625282,31.912798
// -106.633608,31.90981
// -106.639874,31.905584
// -106.645624,31.898735
// -106.645624,31.895456
// -106.643049,31.893124
// -106.639359,31.892104
// -106.634123,31.889407
// -106.630518,31.886201
// -106.629231,31.884014
// -106.631462,31.878621
// -106.634123,31.875341
// -106.635754,31.871697
// -106.635926,31.866594
// -106.627772,31.860762
// -106.626055,31.856316
// -106.61464,31.846473
// -106.608288,31.846619
// -106.605456,31.845963
// -106.601936,31.844578
// -106.601422,31.839911
// -106.603567,31.835609
// -106.603825,31.832911
// -106.604597,31.831234
// -106.605198,31.827733
// -106.602795,31.824816
// -106.593954,31.824816
// -106.587603,31.821972
// -106.582196,31.8157
// -106.581423,31.813658
// -106.577046,31.810376
// -106.570608,31.810157
// -106.566574,31.81322
// -106.563227,31.812345
// -106.562884,31.810959
// -106.558077,31.810303
// -106.547176,31.807093
// -106.543829,31.8033
// -106.540138,31.801112
// -106.535761,31.798194
// -106.532929,31.792577
// -106.531641,31.791847
// -106.530354,31.791993
// -106.52838,31.791008
// -106.527264,31.789695
// -106.527092,31.787725
// -106.527092,31.786047
// -106.527779,31.783859
// -106.527264,31.781414
// -106.524732,31.778605
// -106.523144,31.776015
// -106.518724,31.772914
// -106.515762,31.772075
// -106.51426,31.771455
// -106.512415,31.769703
// -106.511686,31.768207
// -106.510698,31.762771
// -106.509497,31.761165
// -106.507008,31.761348
// -106.506107,31.760983
// -106.503961,31.758976
// -106.501343,31.75737
// -106.500313,31.756057
// -106.497352,31.754524
// -106.49585,31.753685
// -106.494434,31.752189
// -106.49276,31.750766
// -106.491258,31.749853
// -106.490228,31.748977
// -106.486022,31.748028
// -106.482503,31.748685
// -106.475122,31.750437
// -106.473663,31.750546
// -106.472032,31.751386
// -106.470898,31.752352
// -106.469182,31.757096
// -106.468409,31.75841
// -106.466564,31.759942
// -106.455234,31.764394
// -106.451801,31.764649
// -106.449998,31.764102
// -106.434857,31.755152
// -106.430223,31.754058
// -106.41934,31.78285
// -106.402002,31.822532
// -106.326643,31.842075
// -106.366442,31.900402
// -106.495838,31.899146
// -106.6129009,31.9203559